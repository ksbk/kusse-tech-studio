name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, feature/vite-migration]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black isort

      - name: Install Node.js dependencies
        run: |
          npm install

      - name: Lint Python code
        run: |
          flake8 app/ --max-line-length=88 --extend-ignore=E203,W503
          black --check app/
          isort --check-only app/

      - name: Build frontend assets
        run: |
          npm run build

      - name: Run Python tests
        env:
          FLASK_ENV: testing
          SECRET_KEY: test-secret-key
        run: |
          python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
          disable_search: true
          verbose: true
        continue-on-error: true
        timeout-minutes: 2

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Check for known security vulnerabilities
        run: |
          safety check -r requirements.txt

      - name: Run bandit security scan
        run: |
          bandit -r app/ -f json -o bandit-report.json || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: bandit-report.json

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request' && secrets.DOCKER_USERNAME != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: kussetechstudio/portfolio
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' && secrets.DOCKER_USERNAME != '' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Docker build status
        run: |
          if [ "${{ secrets.DOCKER_USERNAME }}" = "" ]; then
            echo "⚠️  Docker Hub credentials not configured"
            echo "✅ Docker image built successfully (test mode only)"
            echo "To enable Docker Hub push and deployment:"
            echo "1. Add DOCKER_USERNAME secret with your Docker Hub username"
            echo "2. Add DOCKER_PASSWORD secret with your Docker Hub password/token"
          else
            echo "✅ Docker Hub credentials configured"
            echo "✅ Docker image built and pushed successfully"
          fi

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Check Docker credentials
        run: |
          if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
            echo "❌ Docker Hub credentials not configured"
            echo "Deployment requires DOCKER_USERNAME and DOCKER_PASSWORD secrets"
            exit 1
          fi
          echo "✅ Docker Hub credentials found"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /var/www/kusse-tech-studio-staging
            git pull origin develop
            cd infra
            docker-compose -f docker-compose.base.yml -f docker-compose.staging.yml down
            docker-compose -f docker-compose.base.yml -f docker-compose.staging.yml pull
            docker-compose -f docker-compose.base.yml -f docker-compose.staging.yml up -d
            docker system prune -f

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Check Docker credentials
        run: |
          if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
            echo "❌ Docker Hub credentials not configured"
            echo "Deployment requires DOCKER_USERNAME and DOCKER_PASSWORD secrets"
            exit 1
          fi
          echo "✅ Docker Hub credentials found"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /var/www/kusse-tech-studio
            git pull origin main
            cd infra
            docker-compose -f docker-compose.base.yml -f docker-compose.production.yml down
            docker-compose -f docker-compose.base.yml -f docker-compose.production.yml pull
            docker-compose -f docker-compose.base.yml -f docker-compose.production.yml up -d
            docker system prune -f

      - name: Health check
        run: |
          sleep 30
          curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1

      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: "#deployments"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
