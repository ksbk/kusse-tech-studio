# Ruff configuration for KusseTechStudio
# See https://docs.astral.sh/ruff/configuration/

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.11
target-version = "py311"

[lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E4",     # pycodestyle errors
    "E7",     # pycodestyle errors
    "E9",     # pycodestyle errors
    "F",      # Pyflakes
    "W",      # pycodestyle warnings
    "C901",   # McCabe complexity
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "C4",     # flake8-comprehensions
    "PIE",    # flake8-pie
    "SIM",    # flake8-simplify
    "RET",    # flake8-return
    "S",      # flake8-bandit (security)
    "BLE",    # flake8-blind-except
    "FBT",    # flake8-boolean-trap
    "COM",    # flake8-commas
    "DTZ",    # flake8-datetimez
    "EM",     # flake8-errmsg
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "G",      # flake8-logging-format
    "INP",    # flake8-no-pep420
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RUF",    # Ruff-specific rules
]

ignore = [
    "S101",   # Use of assert detected (OK in tests)
    "S301",   # pickle can be unsafe (we're not using pickle)
    "S403",   # subprocess module usage (OK for our scripts)
    "S404",   # subprocess.run check (OK for our use case)
    "S602",   # subprocess-popen-with-shell-equals-true
    "S607",   # Starting a process with a partial executable path
    "COM812", # trailing comma missing (conflicts with formatter)
    "COM819", # trailing comma prohibited (conflicts with formatter)
    "FBT001", # Boolean positional arg (OK for simple cases)
    "FBT002", # Boolean default arg (OK for simple cases)
    "DTZ005", # datetime.now() usage (OK for logging)
    "EM101",  # String literal in exception (OK for simple messages)
    "EM102",  # f-string in exception (OK for dynamic messages)
    "G004",   # f-string in logging (OK for performance)
    "RET504", # Unnecessary assignment before return (stylistic choice)
    "RUF012", # Mutable class attributes (OK for Flask apps)
    "BLE001", # Blind except Exception (OK for top-level error handling)
    "C408",   # Unnecessary dict() call (OK for readability in templates)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
docstring-code-line-length = "dynamic"

[lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[lint.isort]
# Use a single line for each import
force-single-line = false
# Combine as imports on the same line
combine-as-imports = true
# Known first party packages
known-first-party = ["app", "config", "scripts"]

[lint.per-file-ignores]
# Tests can use magic values, assertions, and fixtures
"tests/**/*" = ["PLR2004", "S101", "PT011", "PT012"]
# Scripts can use subprocess and have simpler error handling
"scripts/**/*" = ["S602", "S607", "PLR0912", "PLR0915"]
# Configuration files can have longer lines and magic values
"config/**/*" = ["E501", "PLR2004"]
